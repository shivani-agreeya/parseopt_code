version: "3"

services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - ./hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - hadoop.env
    networks:
      dmatnet:
        ipv4_address: 10.1.0.5

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    ports:
      - 9866:9866
      - 9864:9864
    volumes:
      - ./hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - hadoop.env
    networks:
      dmatnet:
        ipv4_address: 10.1.0.6

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - hadoop.env
    networks:
      dmatnet:
        ipv4_address: 10.1.0.7

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - hadoop.env
    networks:
      dmatnet:
        ipv4_address: 10.1.0.8

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - ./hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - hadoop.env
    networks:
      dmatnet:
        ipv4_address: 10.1.0.9

  zoo:
    image: zookeeper:3.4.10
    container_name: zookeeper
    restart: unless-stopped
    hostname: zoo
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - ./zoo/data:/data
      - ./zoo/datalog:/datalog
    networks:
      dmatnet:
        ipv4_address: 10.1.0.10


  kafka:
    image: confluentinc/cp-kafka:5.4.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    depends_on:
      - zoo
    networks:
      dmatnet:
        ipv4_address: 10.1.0.11

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    env_file:
      - ./hadoop.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - 10000:10000
    networks:
      dmatnet:
        ipv4_address: 10.1.0.21

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 hive-metastore-postgresql:5432"
    ports:
      - 9083:9083
    networks:
      dmatnet:
        ipv4_address: 10.1.0.22

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    networks:
      dmatnet:
        ipv4_address: 10.1.0.24

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    container_name: kafka-schema-registry
    hostname: kafka-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zoo
      - kafka
    networks:
      dmatnet:
        ipv4_address: 10.1.0.12

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.4
    container_name: kafka-schema-registry-ui
    hostname: kafka-schema-registry-ui
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    depends_on:
      - kafka-schema-registry
    networks:
      dmatnet:
        ipv4_address: 10.1.0.13

  presto-coordinator:
    image: shawnzhu/prestodb:0.181
    container_name: presto-coordinator
    ports:
      - 9080:8080
    networks:
      dmatnet:
        ipv4_address: 10.1.0.23

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:5.4.0
    container_name: kafka-rest-proxy
    hostname: kafka-rest-proxy
    ports:
      - "8082:8082"
    environment:
      # KAFKA_REST_ZOOKEEPER_CONNECT: zoo:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
    depends_on:
      - zoo
      - kafka
      - kafka-schema-registry
    networks:
      dmatnet:
        ipv4_address: 10.1.0.14


  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    container_name: kafka-topics-ui
    hostname: kafka-topics-ui
    ports:
      - "8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zoo
      - kafka
      - kafka-schema-registry
      - kafka-rest-proxy
    networks:
      dmatnet:
        ipv4_address: 10.1.0.15


  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.4.0
    container_name: kafka-connect
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
    volumes:
      - ./connectors:/etc/kafka-connect/jars/
    depends_on:
      - zoo
      - kafka
      - kafka-schema-registry
      - kafka-rest-proxy
    networks:
      dmatnet:
        ipv4_address: 10.1.0.16

  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.4
    container_name: kafka-connect-ui
    hostname: kafka-connect-ui
    ports:
      - "8003:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka-connect
    networks:
      dmatnet:
        ipv4_address: 10.1.0.17

  ksql-server:
    image: confluentinc/cp-ksql-server:5.4.0
    container_name: ksql-server
    hostname: ksql-server
    ports:
      - "8008:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      KSQL_LISTENERS: http://0.0.0.0:8088/
      KSQL_KSQL_SERVICE_ID: ksql-server
    depends_on:
      - zoo
      - kafka
    networks:
      dmatnet:
        ipv4_address: 10.1.0.18

  zoonavigator:
    image: elkozmon/zoonavigator:0.8.0
    container_name: zoonavigator
    hostname: zoonavigator
    ports:
      - "8004:8000"
    environment:
      HTTP_PORT: 8000
      AUTO_CONNECT_CONNECTION_STRING: zoo:2181
    networks:
      dmatnet:
        ipv4_address: 10.1.0.19

  postgres:
    image: postgis/postgis
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres-d
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-schema.sql
      #      - ./dmat_prod.sde.sql:/docker-entrypoint-initdb.d/2-schema.sql
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      dmatnet:
        ipv4_address: 10.1.0.20

  elasticsearch:
    image: elasticsearch:7.12.1
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      nproc: 65535
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - ALL
    networks:
      - dmatnet
    ports:
      - 9200:9200
      - 9300:9300

  kibana:
    image: kibana:7.12.1
    container_name: kibana
    environment:
      SERVER_NAME: localhost
      ELASTICSEARCH_URL: http://elasticsearch:9200/
    networks:
      - dmatnet
    ports:
      - 5601:5601
    links:
      - elasticsearch
    depends_on:
      - elasticsearch

  logstash:
    image: logstash:7.12.1
    container_name: logstash
    networks:
      - dmatnet
    ports:
      - 6000:6000
    command: logstash --debug -e 'input { tcp { port => 6000 codec => "json" } } output { elasticsearch { hosts => ["elasticsearch:9200"] index => "microlog"} }'
    links:
      - elasticsearch

  hdfs-copier:
    image: repo.vzwdt.com/hdfs-copier:1.0-SNAPSHOT
    container_name: hdfscopier
    hostname: hdfscopier
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?user=postgres&password=postgres-d
      # for remote debug
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5080
      - SPRING_PROFILES_ACTIVE=dev,dbgw-stub
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS=http://kafka:9092
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL=http://kafka-schema-registry:8081
      - HDFS_JOB_SOURCE_URI=file:///tmp
      - HDFS_JOB_HDFS_URI=hdfs://host.docker.internal:9000
    depends_on:
      - postgres
      - kafka
    volumes:
      - ./hdfscopier/tmp:/tmp
      - ./hdfscopier/log:/logs
    ports:
      - 5080:5080
    networks:
      dmatnet:
        ipv4_address: 10.1.0.25

  notification:
    image: repo.vzwdt.com/notification:1.0-SNAPSHOT
    container_name: notification
    hostname: notification
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?user=postgres&password=postgres-d
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5082
      - SPRING_PROFILES_ACTIVE=dev
      - NOTIFICATION_KAFKA_BOOTSTRAP-URL=http://kafka:9092
      - NOTIFICATION_KAFKA_REGISTRY-URL=http://kafka-schema-registry:8081
      - NOTIFICATION_KAFKA_LOGS_TOPIC=ns
      - NOTIFICATION_KAFKA_LOGS_REPLICATION-GROUP-ID=ns
    depends_on:
      - postgres
      - kafka
    volumes:
      - ./notification/tmp:/tmp
      - ./notification/log:/logs
    ports:
      - 5082:5082
    networks:
      dmatnet:
        ipv4_address: 10.1.0.26

networks:
  dmatnet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24
